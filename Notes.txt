# Create a virtualenv to isolate our package dependencies locally
virtualenv -p /usr/bin/python3 env

# Activating the virtualenv
source env/bin/activate  

# Deactivate the virtualenv
deactivate 

# Install Django and Django REST framework into the virtualenv
pip install django
pip install djangorestframework

# Set up a new project with a single application
django-admin.py startproject tutorial .  # Note the trailing '.' character (This specifies the current directory)

cd tutorial
django-admin.py startapp quickstart

#Now sync your database for the first time:
python manage.py migrate


# Creating syperuser
python manage.py createsuperuser


# We can now access our API, both from the command-line, using tools like curl...

bash: curl -H 'Accept: application/json; indent=4' -u admin:password123 http://127.0.0.1:8000/users/

# Or directly through the browser, by going to the URL 
http://127.0.0.1:8000/users/



# Serializing Data

snippet = Snippet(code='print "hello, world"\n')
snippet.save()

serializer = SnippetSerializer(snippet)
serializer.data

# {'id': 2, 'title': u'', 'code': u'print "hello, world"\n', 'linenos': False, 'language': u'python', 'style': u'friendly'}

#At this point we've translated the model instance into Python native datatypes. To finalize the serialization #process we render the data into json.

content = JSONRenderer().render(serializer.data)
content
# '{"id": 2, "title": "", "code": "print \\"hello, world\\"\\n", "linenos": false, "language": "python", "style": "friendly"}'


#Deserialization is similar. First we parse a stream into Python native datatypes...

from django.utils.six import BytesIO

stream = BytesIO(content)
data = JSONParser().parse(stream)

#then we restore those native datatypes into a fully populated object instance.

serializer = SnippetSerializer(data=data)
serializer.is_valid()
# True
serializer.validated_data
# OrderedDict([('title', ''), ('code', 'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])
serializer.save()
# <Snippet: Snippet object>

We can also serialize querysets instead of model instances. To do so we simply add a many=True flag to the serializer arguments.

serializer = SnippetSerializer(Snippet.objects.all(), many=True)
serializer.data
# [OrderedDict([('id', 1), ('title', u''), ('code', u'foo = "bar"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', u''), ('code', u'print "hello, world"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', u''), ('code', u'print "hello, world"'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]



# Note:
The create() and update() methods define how fully fledged instances are created or modified when calling serializer.save()


# you can inspect all the fields in a serializer instance, by printing its representation. 
python manage.py shell
from snippets.serializers import SnippetSerializer

serializer = SnippetSerializer()
print(repr(serializer))

# Model Serializer

It's important to remember that ModelSerializer classes don't do anything particularly magical, they are simply a shortcut for creating serializer classes:

An automatically determined set of fields.
Simple default implementations for the create() and update() methods.

#Request objects
request.data  # Handles arbitrary data.  Works for 'POST', 'PUT' and 'PATCH' methods.

# Response objects
return Response(data)  # Renders to content type as requested by the client.

#Status codes
such as HTTP_400_BAD_REQUEST in the status module

#Wrapping API views
REST framework provides two wrappers you can use to write API views.

The @api_view decorator for working with function based views.
The APIView class for working with class-based views.